import org.codehaus.plexus.util.FileUtils;

try {
    new File(basedir, "gitignorefile").renameTo(new File(basedir, ".gitignore"));

    Process p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " init");
    p.waitFor();

    Process p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " config user.email 'a@a.aa'");
    p.waitFor();
    Process p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " config user.name 'a'");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " add .");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " commit -m init");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " branch release/0.0.3");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " checkout -b develop");
    p.waitFor();

    File pomfile = new File(basedir, "pom.xml");
    String pomfilestr = FileUtils.fileRead(pomfile, "UTF-8");
    pomfilestr = pomfilestr.replaceAll("0.0.3-SNAPSHOT", "0.0.4-SNAPSHOT");
    FileUtils.fileWrite(basedir + "/pom.xml", "UTF-8", pomfilestr);

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " add .");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " commit -m next");
    p.waitFor();

} catch (Exception e) {
    e.printStackTrace();
    return false;
}
return true;
