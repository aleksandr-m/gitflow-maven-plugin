import org.codehaus.plexus.util.FileUtils;
import org.codehaus.plexus.util.IOUtil;


try {
    new File(basedir, "gitignorefile").renameTo(new File(basedir, ".gitignore"));

    Process p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " init");
    p.waitFor();

    Process p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " config user.email 'a@a.aa'");
    p.waitFor();
    Process p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " config user.name 'a'");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " add .");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " commit -m init");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " tag -a 0.0.1 -m 0.0.1");
    p.waitFor();

    File file = new File(basedir, "test.txt");
    FileUtils.fileAppend(file.getPath(), "next commit");

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " add .");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " commit -m next");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " tag -a 0.0.3 -m 0.0.3");
    p.waitFor();
    
    
    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " tag -a 0.0.20 -m 0.0.20");
    p.waitFor();
    

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " checkout -b develop");
    p.waitFor();



    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " for-each-ref --sort=-*authordate --format=\"%(refname:short)\" refs/tags/");
    p.waitFor();
    System.out.println("1: " + IOUtil.toString(p.getInputStream()));
    System.out.println("1.err: " + IOUtil.toString(p.getErrorStream()));


    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " for-each-ref --sort=-*authordate --count=1 --format=\"%(refname:short)\" refs/tags/");
    p.waitFor();
    System.out.println("2: " + IOUtil.toString(p.getInputStream()));
    System.out.println("2.err: " + IOUtil.toString(p.getErrorStream()));


    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " for-each-ref --sort=\"-version:refname\" --format=\"%(refname:short) %(taggerdate:unix)\" refs/tags/");
    p.waitFor();
    System.out.println("3: " + IOUtil.toString(p.getInputStream()));
    System.out.println("3.err: " + IOUtil.toString(p.getErrorStream()));

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " for-each-ref --sort=-taggerdate --sort=\"-version:refname\" --format=\"%(refname:short) %(taggerdate:unix)\" refs/tags/");
    p.waitFor();
    System.out.println("4: " + IOUtil.toString(p.getInputStream()));
    System.out.println("4.err: " + IOUtil.toString(p.getErrorStream()));


} catch (Exception e) {
    e.printStackTrace();
    return false;
}
return true;
